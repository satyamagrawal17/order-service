// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/repository.go

// Package repository is a generated GoMock package.
package repository

import (
	model "ordering_service/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIOrderRepository is a mock of IOrderRepository interface.
type MockIOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIOrderRepositoryMockRecorder
}

// MockIOrderRepositoryMockRecorder is the mock recorder for MockIOrderRepository.
type MockIOrderRepositoryMockRecorder struct {
	mock *MockIOrderRepository
}

// NewMockIOrderRepository creates a new mock instance.
func NewMockIOrderRepository(ctrl *gomock.Controller) *MockIOrderRepository {
	mock := &MockIOrderRepository{ctrl: ctrl}
	mock.recorder = &MockIOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOrderRepository) EXPECT() *MockIOrderRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIOrderRepository) Create(order *model.Order) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Create", order)
}

// Create indicates an expected call of Create.
func (mr *MockIOrderRepositoryMockRecorder) Create(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIOrderRepository)(nil).Create), order)
}

// GetOrderById mocks base method.
func (m *MockIOrderRepository) GetOrderById(orderId uint32) *model.Order {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderById", orderId)
	ret0, _ := ret[0].(*model.Order)
	return ret0
}

// GetOrderById indicates an expected call of GetOrderById.
func (mr *MockIOrderRepositoryMockRecorder) GetOrderById(orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderById", reflect.TypeOf((*MockIOrderRepository)(nil).GetOrderById), orderId)
}

// GetOrders mocks base method.
func (m *MockIOrderRepository) GetOrders() []model.Order {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders")
	ret0, _ := ret[0].([]model.Order)
	return ret0
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockIOrderRepositoryMockRecorder) GetOrders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockIOrderRepository)(nil).GetOrders))
}

// GetOrdersByUserId mocks base method.
func (m *MockIOrderRepository) GetOrdersByUserId(userId uint32) []model.Order {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersByUserId", userId)
	ret0, _ := ret[0].([]model.Order)
	return ret0
}

// GetOrdersByUserId indicates an expected call of GetOrdersByUserId.
func (mr *MockIOrderRepositoryMockRecorder) GetOrdersByUserId(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersByUserId", reflect.TypeOf((*MockIOrderRepository)(nil).GetOrdersByUserId), userId)
}

// UpdateStatus mocks base method.
func (m *MockIOrderRepository) UpdateStatus(orderId uint32, status string) *model.Order {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", orderId, status)
	ret0, _ := ret[0].(*model.Order)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockIOrderRepositoryMockRecorder) UpdateStatus(orderId, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockIOrderRepository)(nil).UpdateStatus), orderId, status)
}
