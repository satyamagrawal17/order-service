// Code generated by MockGen. DO NOT EDIT.
// Source: internal/client/delivery-client.go

// Package client is a generated GoMock package.
package client

import (
	delivery "ordering_service/pb/delivery"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDeliveryServiceClientInterface is a mock of DeliveryServiceClientInterface interface.
type MockDeliveryServiceClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDeliveryServiceClientInterfaceMockRecorder
}

// MockDeliveryServiceClientInterfaceMockRecorder is the mock recorder for MockDeliveryServiceClientInterface.
type MockDeliveryServiceClientInterfaceMockRecorder struct {
	mock *MockDeliveryServiceClientInterface
}

// NewMockDeliveryServiceClientInterface creates a new mock instance.
func NewMockDeliveryServiceClientInterface(ctrl *gomock.Controller) *MockDeliveryServiceClientInterface {
	mock := &MockDeliveryServiceClientInterface{ctrl: ctrl}
	mock.recorder = &MockDeliveryServiceClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeliveryServiceClientInterface) EXPECT() *MockDeliveryServiceClientInterfaceMockRecorder {
	return m.recorder
}

// AssignDelivery mocks base method.
func (m *MockDeliveryServiceClientInterface) AssignDelivery(arg0 *delivery.AssignDeliveryRequest) (*delivery.AssignDeliveryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignDelivery", arg0)
	ret0, _ := ret[0].(*delivery.AssignDeliveryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignDelivery indicates an expected call of AssignDelivery.
func (mr *MockDeliveryServiceClientInterfaceMockRecorder) AssignDelivery(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignDelivery", reflect.TypeOf((*MockDeliveryServiceClientInterface)(nil).AssignDelivery), arg0)
}

// UpdateDeliveryStatus mocks base method.
func (m *MockDeliveryServiceClientInterface) UpdateDeliveryStatus(arg0 *delivery.UpdateDeliveryStatusRequest) (*delivery.UpdateDeliveryStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeliveryStatus", arg0)
	ret0, _ := ret[0].(*delivery.UpdateDeliveryStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDeliveryStatus indicates an expected call of UpdateDeliveryStatus.
func (mr *MockDeliveryServiceClientInterfaceMockRecorder) UpdateDeliveryStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeliveryStatus", reflect.TypeOf((*MockDeliveryServiceClientInterface)(nil).UpdateDeliveryStatus), arg0)
}
