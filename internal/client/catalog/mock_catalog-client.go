// Code generated by MockGen. DO NOT EDIT.
// Source: internal/client/catalog/catalog-client.go

// Package catalog is a generated GoMock package.
package catalog

import (
	catalog "ordering_service/pb/catalog"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRestaurantServiceClientInterface is a mock of RestaurantServiceClientInterface interface.
type MockRestaurantServiceClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRestaurantServiceClientInterfaceMockRecorder
}

// MockRestaurantServiceClientInterfaceMockRecorder is the mock recorder for MockRestaurantServiceClientInterface.
type MockRestaurantServiceClientInterfaceMockRecorder struct {
	mock *MockRestaurantServiceClientInterface
}

// NewMockRestaurantServiceClientInterface creates a new mock instance.
func NewMockRestaurantServiceClientInterface(ctrl *gomock.Controller) *MockRestaurantServiceClientInterface {
	mock := &MockRestaurantServiceClientInterface{ctrl: ctrl}
	mock.recorder = &MockRestaurantServiceClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRestaurantServiceClientInterface) EXPECT() *MockRestaurantServiceClientInterfaceMockRecorder {
	return m.recorder
}

// GetRestaurantById mocks base method.
func (m *MockRestaurantServiceClientInterface) GetRestaurantById(request *catalog.GetRestaurantByIdRequest) (*catalog.Restaurant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRestaurantById", request)
	ret0, _ := ret[0].(*catalog.Restaurant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRestaurantById indicates an expected call of GetRestaurantById.
func (mr *MockRestaurantServiceClientInterfaceMockRecorder) GetRestaurantById(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestaurantById", reflect.TypeOf((*MockRestaurantServiceClientInterface)(nil).GetRestaurantById), request)
}

// MockItemServiceClientInterface is a mock of ItemServiceClientInterface interface.
type MockItemServiceClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockItemServiceClientInterfaceMockRecorder
}

// MockItemServiceClientInterfaceMockRecorder is the mock recorder for MockItemServiceClientInterface.
type MockItemServiceClientInterfaceMockRecorder struct {
	mock *MockItemServiceClientInterface
}

// NewMockItemServiceClientInterface creates a new mock instance.
func NewMockItemServiceClientInterface(ctrl *gomock.Controller) *MockItemServiceClientInterface {
	mock := &MockItemServiceClientInterface{ctrl: ctrl}
	mock.recorder = &MockItemServiceClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemServiceClientInterface) EXPECT() *MockItemServiceClientInterfaceMockRecorder {
	return m.recorder
}

// GetItemById mocks base method.
func (m *MockItemServiceClientInterface) GetItemById(request *catalog.GetItemByIdRequest) (*catalog.MenuItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemById", request)
	ret0, _ := ret[0].(*catalog.MenuItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemById indicates an expected call of GetItemById.
func (mr *MockItemServiceClientInterfaceMockRecorder) GetItemById(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemById", reflect.TypeOf((*MockItemServiceClientInterface)(nil).GetItemById), request)
}
